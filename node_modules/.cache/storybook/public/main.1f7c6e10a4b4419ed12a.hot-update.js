"use strict";
globalThis["webpackHotUpdatesitio3"]("main",{

/***/ "./src/components/Dialogs.jsx":
/*!************************************!*\
  !*** ./src/components/Dialogs.jsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dialog": () => (/* binding */ Dialog)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Dialog_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dialog.css */ "./src/components/Dialog.css");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _excluded = ["primary", "backgroundColor", "size", "label"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }




/**
 * Primary UI component for user interaction
 */

var Dialog = function (_ref) {
  var primary = _ref.primary,
    backgroundColor = _ref.backgroundColor,
    size = _ref.size,
    label = _ref.label,
    props = _objectWithoutProperties(_ref, _excluded);
  var mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", Object.assign({
    type: "button",
    className: ['storybook-button', `storybook-button--${size}`, mode].join(' '),
    style: backgroundColor && {
      backgroundColor: backgroundColor
    }
  }, props, {
    children: label
  }));
};
Dialog.displayName = "Dialog";
Dialog.propTypes = {
  /**
   * Is this the principal call to action on the page?
   */
  primary: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
  /**
   * What background color to use
   */
  backgroundColor: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
  /**
   * How large should the button be?
   */
  size: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(['small', 'medium', 'large']),
  /**
   * Button contents
   */
  label: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string.isRequired),
  /**
   * Optional click handler
   */
  onClick: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func)
};
Button.defaultProps = {
  backgroundColor: null,
  primary: false,
  size: 'medium',
  onClick: undefined
};
Dialog.__docgenInfo = {
  "description": "Primary UI component for user interaction",
  "methods": [],
  "displayName": "Dialog",
  "props": {
    "primary": {
      "description": "Is this the principal call to action on the page?",
      "type": {
        "name": "bool"
      },
      "required": false
    },
    "backgroundColor": {
      "description": "What background color to use",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "size": {
      "description": "How large should the button be?",
      "type": {
        "name": "enum",
        "value": [{
          "value": "'small'",
          "computed": false
        }, {
          "value": "'medium'",
          "computed": false
        }, {
          "value": "'large'",
          "computed": false
        }]
      },
      "required": false
    },
    "label": {
      "description": "Button contents",
      "type": {
        "name": "string"
      },
      "required": true
    },
    "onClick": {
      "description": "Optional click handler",
      "type": {
        "name": "func"
      },
      "required": false
    }
  }
};
if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src\\components\\Dialogs.jsx"] = {
    name: "Dialog",
    docgenInfo: Dialog.__docgenInfo,
    path: "src\\components\\Dialogs.jsx"
  };
}

/***/ })

});
//# sourceMappingURL=main.1f7c6e10a4b4419ed12a.hot-update.js.map